//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: FoodCompanyGateWayService.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `FoodCompanyGateWayServiceClient`, then call methods of this protocol to make API calls.
public protocol FoodCompanyGateWayServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: FoodCompanyGateWayServiceClientInterceptorFactoryProtocol? { get }

  func getOrderStatus(
    _ request: GetOrderStatusRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<GetOrderStatusRequest, GetOrderStatusResponse>
}

extension FoodCompanyGateWayServiceClientProtocol {
  public var serviceName: String {
    return "FoodCompanyGateWayService"
  }

  /// Unary call to GetOrderStatus
  ///
  /// - Parameters:
  ///   - request: Request to send to GetOrderStatus.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getOrderStatus(
    _ request: GetOrderStatusRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<GetOrderStatusRequest, GetOrderStatusResponse> {
    return self.makeUnaryCall(
      path: FoodCompanyGateWayServiceClientMetadata.Methods.getOrderStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetOrderStatusInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension FoodCompanyGateWayServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "FoodCompanyGateWayServiceNIOClient")
public final class FoodCompanyGateWayServiceClient: FoodCompanyGateWayServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: FoodCompanyGateWayServiceClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: FoodCompanyGateWayServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the FoodCompanyGateWayService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: FoodCompanyGateWayServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct FoodCompanyGateWayServiceNIOClient: FoodCompanyGateWayServiceClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: FoodCompanyGateWayServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the FoodCompanyGateWayService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: FoodCompanyGateWayServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol FoodCompanyGateWayServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: FoodCompanyGateWayServiceClientInterceptorFactoryProtocol? { get }

  func makeGetOrderStatusCall(
    _ request: GetOrderStatusRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<GetOrderStatusRequest, GetOrderStatusResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension FoodCompanyGateWayServiceAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return FoodCompanyGateWayServiceClientMetadata.serviceDescriptor
  }

  public var interceptors: FoodCompanyGateWayServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeGetOrderStatusCall(
    _ request: GetOrderStatusRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<GetOrderStatusRequest, GetOrderStatusResponse> {
    return self.makeAsyncUnaryCall(
      path: FoodCompanyGateWayServiceClientMetadata.Methods.getOrderStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetOrderStatusInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension FoodCompanyGateWayServiceAsyncClientProtocol {
  public func getOrderStatus(
    _ request: GetOrderStatusRequest,
    callOptions: CallOptions? = nil
  ) async throws -> GetOrderStatusResponse {
    return try await self.performAsyncUnaryCall(
      path: FoodCompanyGateWayServiceClientMetadata.Methods.getOrderStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetOrderStatusInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct FoodCompanyGateWayServiceAsyncClient: FoodCompanyGateWayServiceAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: FoodCompanyGateWayServiceClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: FoodCompanyGateWayServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol FoodCompanyGateWayServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'getOrderStatus'.
  func makeGetOrderStatusInterceptors() -> [ClientInterceptor<GetOrderStatusRequest, GetOrderStatusResponse>]
}

public enum FoodCompanyGateWayServiceClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "FoodCompanyGateWayService",
    fullName: "FoodCompanyGateWayService",
    methods: [
      FoodCompanyGateWayServiceClientMetadata.Methods.getOrderStatus,
    ]
  )

  public enum Methods {
    public static let getOrderStatus = GRPCMethodDescriptor(
      name: "GetOrderStatus",
      path: "/FoodCompanyGateWayService/GetOrderStatus",
      type: GRPCCallType.unary
    )
  }
}

